<?php

namespace LaravelMl\Tests\Commands;

use Illuminate\Http\Client\Request;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use LaravelMl\Api\Api;
use LaravelMl\Tests\BaseTest;
use LaravelMl\Tests\Models\TestModelItem;

class DatabaseMlCommandTest extends BaseTest
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        config([
            'laravel-ml' => [
                'database' => '::database::',
            ],
        ]);
    }


    /** @test */
    public function modelShowsAnErrorWhenNoApiKey()
    {
        $this->artisan('ml')
            ->expectsOutput('Missing API Key. Add ML_API_TOKEN={apiKey} to your .env file. You can get a key at https://laravelml.com')
            ->assertExitCode(1);
    }

    // 1.a.
    /** @test */
    public function promptSetDatabaseEnvWhenNonePresentWithRemoteResults()
    {
        config([
            'laravel-ml' => [
                'token' => 'abc',
                'database' => null,
            ],
        ]);

        Http::fake([
            Api::HOST . '/databases' => Http::response([
                'data' => [
                    [
                        'id' => 1,
                        'name' => '::database1::',
                    ],
                    [
                        'id' => 2,
                        'name' => '::database2::',
                    ],
                ]
            ], 200),
        ]);

        $this->artisan('ml')
            ->expectsChoice('No local database set. Would you like to use an existing database?', '::database1::', ['::database1::', '::database2::'])
            ->assertExitCode(0)
        ;

        // TODO: assert .env file is written to.
    }

    // 1.b. missing remote, do you want to create local?
    /** @test */
    public function promptCreateDatabaseFromUserInputWhenDoesNotExist()
    {
        config([
            'laravel-ml' => [
                'token' => 'abc',
                'database' => '::database::',
            ],
        ]);

        Http::fake([
            Api::HOST . '/databases' => Http::response([
                'data' => [],
            ], 200),
        ]);

        $this->artisan('ml')
            ->expectsConfirmation("Would you like to create database: '::database::'?", 'Yes')
            ->assertExitCode(0)
        ;

        Http::assertSent(function (Request $request) {
            return Str::contains($request->url(), ['/api/databases'])
                && $request->method() === 'POST'
                && $request['name'] === '::database::';
        });
    }

    // 2.a. missing local, no remotes.
    /** @test */
    public function promptCreateDatabaseWhenDoesNotExist()
    {

        config([
            'laravel-ml' => [
                'token' => 'abc',
                'database' => null,
            ],
        ]);

        Http::fake([
            Api::HOST . '/databases' => Http::response([
                'data' => [],
            ], 200),
        ]);

        $this->artisan('ml')
            ->expectsQuestion('Would you like to create a new database?', '::database::')
            ->expectsConfirmation("Would you like to create database: '::database::'?", 'Yes')
            ->assertExitCode(0)
        ;

        Http::assertSent(function (Request $request) {
            return Str::contains($request->url(), ['/api/databases'])
                && $request->method() === 'POST'
                && $request['name'] === '::database::';
        });

        // TODO: assert .env file was written to.
    }

    // 2.b. All is right.
    /** @test */
    public function allDatabasesAreDisplayed()
    {
        config([
            'laravel-ml' => [
                'token' => 'abc',
                'database' => '::database1::',
            ],
        ]);

        Http::fake([
            Api::HOST . '/databases' => Http::response([
                'data' => [
                    [
                        'id' => 1,
                        'name' => '::database1::',
                    ],
                    [
                        'id' => 2,
                        'name' => '::database2::',
                    ],
                ]
            ], 200),
        ]);

        $this->artisan('ml')
            ->expectsOutput('**  1. ::database1:: (default)')
            ->expectsQuestion("Which action would you like to perform on '::database1::'?", 'Nevermind, just lookin\'')
            ->expectsOutput('I appreciate you ðŸ‘‹')
            ->assertExitCode(0)
        ;
    }

    // warning if no remote databases match with the locally set one.
    /** @test */
    public function warningWhenConfigDatabaseDoesNotExistInRemote()
    {
        config([
            'laravel-ml' => [
                'token' => 'abc',
                'database' => '::database_not_in_Http_response::',
            ],
        ]);

        Http::fake([
            Api::HOST . '/databases' => Http::response([
                'data' => [
                    [
                        'id' => 1,
                        'name' => '::database1::',
                    ],
                    [
                        'id' => 2,
                        'name' => '::database2::',
                    ],
                ]
            ], 200),
        ]);

        $this->artisan('ml')
            ->expectsOutput("Database '::database_not_in_Http_response::' does not exist on laravel-ml.com.")
            ->assertExitCode(0)
        ;
    }

    /** @test */
    public function allDatabaseParamFromUserInputWillOverrideDefaultDatabase()
    {
        config([
            'laravel-ml' => [
                'token' => 'abc',
                'database' => '::database1::',
            ],
        ]);

        Http::fake([
            Api::HOST . '/databases' => Http::response([
                'data' => [
                    [
                        'id' => 1,
                        'name' => '::database1::',
                    ],
                    [
                        'id' => 2,
                        'name' => '::database2::',
                    ],
                ]
            ], 200),
        ]);

        $this->artisan('ml --database=::database2::')
            ->expectsOutput('**  2. ::database2:: (default)')
            ->assertExitCode(0)
        ;
    }

    /** @test */
    public function deleteDatabaseIsNotSupportedOnCli()
    {
        config([
            'laravel-ml' => [
                'token' => 'abc',
                'database' => '::database1::',
            ],
        ]);

        Http::fake([
            Api::HOST . '/databases' => Http::response([
                'data' => [
                    [
                        'id' => 1,
                        'name' => '::database1::',
                    ],
                    [
                        'id' => 2,
                        'name' => '::database2::',
                    ],
                ]
            ], 200),
        ]);

        $this->artisan('ml')
            ->expectsOutput('**  1. ::database1:: (default)')
            ->expectsQuestion("Which action would you like to perform on '::database1::'?", 'Delete')
            ->expectsOutput('Deleting a database from the command line is currently not supported. Please delete on laravel-ml.com.')
            ->assertExitCode(0)
        ;
    }

    /** @test */
    public function seedDatabaseWillCallSeedCommand()
    {
        config([
            'laravel-ml' => [
                'token' => 'abc',
                'database' => '::database1::',
            ],
        ]);

        Http::fake([
            Api::HOST . '/databases' => Http::response([
                'data' => [
                    [
                        'id' => 1,
                        'name' => '::database1::',
                    ],
                    [
                        'id' => 2,
                        'name' => '::database2::',
                    ],
                ]
            ], 200),
        ]);

        $this->artisan('ml')
            ->expectsOutput('**  1. ::database1:: (default)')
            ->expectsQuestion("Which action would you like to perform on '::database1::'?", 'Seed')
            ->assertExitCode(0)
        ;
    }

    /** @test */
    public function retrainDatabaseWillCallRetrainCommand()
    {
        config([
            'laravel-ml' => [
                'token' => 'abc',
                'database' => '::database1::',
            ],
        ]);

        Http::fake([
            Api::HOST . '/databases' => Http::response([
                'data' => [
                    [
                        'id' => 1,
                        'name' => '::database1::',
                    ],
                    [
                        'id' => 2,
                        'name' => '::database2::',
                    ],
                ]
            ], 200),
        ]);

        $this->artisan('ml')
            ->expectsOutput('**  1. ::database1:: (default)')
            ->expectsQuestion("Which action would you like to perform on '::database1::'?", 'Retrain')
            ->assertExitCode(0)
        ;
    }
}
