<?php


namespace LaravelMl\Tests\ModelTests;

use Illuminate\Http\Client\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use LaravelMl\Api\Api;
use LaravelMl\Tests\BaseTest;
use LaravelMl\Tests\Models\TestModelItem;
use LaravelMl\Tests\Models\TestModelUser;

class GetRecommendationTest extends BaseTest
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        config([
            'laravel-ml' => [
                'database' => '::database::',
            ],
        ]);
    }

    /** @test */
    public function isLmlItem()
    {
        Http::fake([
            '*' => Http::response([
                'data' => [
                    'recommendation_id' => '::recommendation_id::',
                    'items' => [
                        [
                            'item_id' => "::item1::",
                            'score' => 0.09,
                        ],
                        [
                            'item_id' => "::item2::",
                            'score' => 0.05,
                        ],
                    ],
                ],
            ])
        ]);

        $testModel = TestModelItem::create([
            'color' => 'green',
            'rating' => 4.45,
            'ratings' => 132,
        ]);

        $actualRelatedItemResponse = $testModel->related();

        $this->assertEquals([
            'recommendation_id' => '::recommendation_id::',
            'items' => [
                [
                    'item_id' => "::item1::",
                    'score' => 0.09,
                ],
                [
                    'item_id' => "::item2::",
                    'score' => 0.05,
                ],
            ],
        ], $actualRelatedItemResponse);
    }

    /** @test */
    public function isLmlUser()
    {
        Http::fake([
            '*' => Http::response([
                'data' => [
                    'recommendation_id' => '::recommendation_id::',
                    'items' => [
                        [
                            'item_id' => "::item1::",
                            'score' => 0.09,
                        ],
                        [
                            'item_id' => "::item2::",
                            'score' => 0.05,
                        ],
                    ],
                ],
            ])
        ]);

        $testModel = TestModelUser::create([
            'name' => 'John Doe',
            'gender' => 'Male',
            'age' => 22,
            'salary' => 124567,
        ]);

        $actualRecommendedItemsResponse = $testModel->recommend();

        $this->assertEquals([
            'recommendation_id' => '::recommendation_id::',
            'items' => [
                [
                    'item_id' => "::item1::",
                    'score' => 0.09,
                ],
                [
                    'item_id' => "::item2::",
                    'score' => 0.05,
                ],
            ],
        ], $actualRecommendedItemsResponse);
    }

}
