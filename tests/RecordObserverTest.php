<?php

namespace LaravelMl\Tests;

use Illuminate\Http\Client\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use LaravelMl\LmlDatabaseConfig;
use LaravelMl\Tests\Models\TestModel;

class RecordObserverTest extends BaseTest
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        config([
            'laravel-ml' => [
                'databases' => [
                    LmlDatabaseConfig::make()
                        ->setName('test_models')
                        ->setType(LmlDatabaseConfig::TYPE_ANOMALY)
                        ->setDatatype(LmlDatabaseConfig::DATATYPE_CONTINUOUS)
                ]
            ],
        ]);
    }

    /** @test */
    public function recordCreate()
    {
        Http::fake();

        $testModel = TestModel::create([
            'name' => 'zach',
            'age' => 25,
            'salary' => 50000,
        ]);

        Http::assertSent(function (Request $request) use ($testModel) {
            return Str::contains($request->url(), ['/api/databases/' . $testModel->ml()->database()->name() . '/records'])
                && $request->method() === 'POST'
                && $request['identifier'] === $testModel->id
                && $request['class'] === 'TestModel'
                && $request['features'][0] === 25
                && $request['label'] === 50000;
        });
    }

    /** @test */
    public function recordUpdate()
    {
        Http::fake();

        $testModel = TestModel::create([
            'name' => 'zach',
            'age' => 25,
            'salary' => 50000,
        ]);

        $testModel->update([
            'salary' => 60000,
        ]);

        Http::assertSent(function (Request $request) use ($testModel) {
            return Str::contains($request->url(), ['/api/databases/' . $testModel->ml()->database()->name() . '/records/' . $testModel->ml()->networkId()])
                && $request->method() === 'PUT'
                && $request['identifier'] === $testModel->id
                && $request['class'] === 'TestModel'
                && $request['features'][0] === 25
                && $request['label'] === 60000;
        });
    }

    /** @test */
    public function recordDelete()
    {
        Http::fake();

        $testModel = TestModel::create([
            'name' => 'zach',
            'age' => 25,
            'salary' => 50000,
        ]);

        $testModel->delete();

        Http::assertSent(function (Request $request) use ($testModel) {
            return Str::contains($request->url(), ['/api/databases/' . $testModel->ml()->database()->name() . '/records/' . $testModel->ml()->networkId()])
                && $request->method() === 'DELETE';
        });
    }

    /** @test */
    public function recordCreateRespectsIsTrainable()
    {
        Http::fake();

        $testModel = new TestModel([
            'name' => 'zach',
            'age' => 25,
            'salary' => 50000,
        ]);
        $testModel->isTrainable = false;
        $testModel->save();

        Http::assertNotSent(function (Request $request) use ($testModel) {
            return Str::contains($request->url(), ['/api/databases/' . $testModel->ml()->database()->name() . '/records'])
                && $request->method() === 'POST'
                && $request['identifier'] === $testModel->id
                && $request['class'] === 'TestModel'
                && $request['features'][0] === 25
                && $request['label'] === 50000;
        });
    }

    /** @test */
    public function recordUpdateRespectsIsTrainable()
    {
        $testModel = TestModel::create([
            'name' => 'zach',
            'age' => 25,
            'salary' => 50000,
        ]);

        Http::fake();
        $testModel->isTrainable = false;
        $testModel->update([
            'salary' => 60000,
        ]);

        Http::assertNotSent(function (Request $request) use ($testModel) {
            return Str::contains($request->url(), ['/api/databases/' . $testModel->ml()->database()->name() . '/records/' . $testModel->ml()->networkId()])
                && $request->method() === 'PUT'
                && $request['identifier'] === $testModel->id
                && $request['class'] === 'TestModel'
                && $request['features'][0] === 25
                && $request['label'] === 60000;
        });
    }

    /** @test */
    public function recordDeleteRespectsIsTrainable()
    {
        $testModel = TestModel::create([
            'name' => 'zach',
            'age' => 25,
            'salary' => 50000,
        ]);

        Http::fake();
        $testModel->isTrainable = false;
        $testModel->delete();

        Http::assertNotSent(function (Request $request) use ($testModel) {
            return Str::contains($request->url(), ['/api/databases/' . $testModel->ml()->database()->name() . '/records/' . $testModel->ml()->networkId()])
                && $request->method() === 'DELETE';
        });
    }
}
